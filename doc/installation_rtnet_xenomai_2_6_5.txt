Laurent LEQUIEVRE
CNRS
Institut Pascal UMR 6602
MACCS team (http://www.institutpascal.uca.fr/index.php/fr/maccs)
laurent.lequievre@uca.fr


Let's have a look to :
http://www.rtnet.org/download/RTnet-ETFA05.pdf
http://rtt-lwr.readthedocs.io/en/latest/rtpc/rtnet.html


-> Prepare Installation
=======================

-> Get the name and the driver version of the ethernet card
lspci -vvv -nn | grep -C 10 Ethernet

On my laptop :
-> Ethernet controller [0200]: Intel Corporation 82579LM Gigabit Network Connection
-> Kernel driver in use: e1000e


-> get the code of RTNet project
	We’re using a custom website that fixes compilation problems for kernel > 3.10 source. This is fixed in Xenomai 3 as RTnet is integrated directly.
	If on kernel < 3.18 :
		git clone https://github.com/konradb3/RTnet.git
	if on kernel >= 3.18 (same with a fix) :
		git clone https://github.com/kuka-isir/RTnet.git


for me, the kernel is >= 18 so : git clone https://github.com/kuka-isir/RTnet.git

Ubuntu package installation
===========================
pour rafraîchir les écrans en mode texte avec une bonne optimisation
sudo apt install libncurses5-dev

-> Installation
===============
cd RTnet
make menuconfig
(Esc to quit sub screen or 2x Esc to quit menuconfig)

choices done with menuconfig of RTnet :
---------------------------------------

Variant --> Xenomai 2.1

Protocol Stack -->
	--- Protocols
		TCP Support (for ATI Force Sensor)
		UDP Support (for FRI)
Drivers -->
	--- Common PCI Drivers
		New Intel(R) PRO/1000 PCIe (Gigabit) (NEW) (The driver you use)
	--- Misc Drivers
		Loopback

Add-Ons -->
	Real-Time Capturing Support (optional, for Wireshark debugging)


Examples -->
	RTnet Application Examples (optional)

# Configure the options below
# Then hit ESC 2 times, save the config, and build

compilation
-----------

make

# Install in /usr/local/rtnet/ (default location)
sudo make install

Create the RTnet management device node
---------------------------------------

sudo mknod /dev/rtnet c 10 240

Modify RTnet conf file
----------------------

sudo nano /usr/local/rtnet/etc/rtnet.conf

1. The RT_DRIVER should be the realtime equivalent of the module you removed

-> replace RT_DRIVER="rt_eepro100" with RT_DRIVER="rt_e1000e" because my kernel driver is e1000e and the real time version is rt_e1000e
for info on e1000e kernel driver:

ethtool -i eth0
driver: e1000e
version: 2.3.2-k
firmware-version: 0.15-4

lsmod | grep e1000e
e1000e                250023  0 
ptp                    18933  1 e1000e

modinfo e1000e
filename:       /lib/modules/3.14.17-xenomai-2.6.4/kernel/drivers/net/ethernet/intel/e1000e/e1000e.ko
version:        2.3.2-k
license:        GPL
description:    Intel(R) PRO/1000 Network Driver
author:         Intel Corporation, <linux.nics@intel.com>
srcversion:     6CF388DAB7E0A7AEE3E46E7


for info on rt version of e1000e kernel driver :
cd /usr/local/rtnet/modules
ls
.... rt_e1000e.ko ...

2. RT_DRIVER_OPTIONS should just have empty quotes because there is only one card on the Host.
2bis. REBIND_RT_NICS list NIC (Network interface controller) addresses of PCI cards.
you can check the NIC address typing 'lshw -C network' and looking at "bus info: pci@..."
for my laptop : REBIND_RT_NICS="0000:00:19.0"

3. IPADDR
for exemple : IPADDR="127.0.0.2" because you setup yourself as the master with this address and you want to talk to the local loopback which will be setup as a slave at 127.0.0.1 
IP of the master (your computer). ALl the slaves will send/receive to/from master IP.
for my laptop : IPADDR="192.168.100.102"

4. NETMASK="255.255.255.0"

5. RT_LOOPBACK="no" (yes if we want to test with 127.0.0.1)

5 bis. RT_PROTOCOLS="udp packet tcp"  (UDP et TCP protocols)

6. RTCAP="yes" (yes if you want to run real time capturing of packets like Ethereal and To debug with Wireshark).

7. Setup TDMA_SLAVES = 127.0.0.1 for loopback as the slave. (cf .../RTnet/Documentation/README.rtmac)
8. 	# Simple setup: Cycle time in microsecond
	TDMA_CYCLE="450"
	# Simple setup: Offset in microsecond between TDMA slots
	TDMA_OFFSET="50"

For our platform :
Master = ip address of the laptop : 192.168.100.102
Slaves = ip address of kuka arm left and right : 
-> IP of right arm : 192.168.100.253
-> IP of left arm : 192.168.100.254

Time division multiple access (TDMA) is a channel access method for shared medium networks. It allows several users to share the same frequency channel by dividing the signal into different time slots.


Testing rtnet
-------------

1. down the eth0 network interface
sudo ifconfig eth0 down

2. remove e1000e kernel driver
sudo rmmod e1000e

3. start rtnet
cd /usr/local/rtnet/sbin
sudo ./rtnet start
It will wait for slaves ...
press cntl^c

4. ping local address 127.0.0.1
sudo ./rtping 127.0.0.1

5. stop rtnet transmitting on the card
sudo ./rtnet stop

If you want to reconnect your previous module e1000e :
sudo modprobe e1000e  (load the e1000e module)
sudo ifconfig eth0 up (load eth0)

Testing with wireshark
----------------------

install wireshark from sources : http://linuxg.net/how-to-install-wireshark-1-12-on-ubuntu-14-04-and-derivatives-from-sources/



Read file : ...../RTnet/README

